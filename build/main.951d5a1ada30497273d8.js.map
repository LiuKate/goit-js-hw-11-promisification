{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","canProcess","reject","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAOC,QAAQC,QAAQF,IAGrBG,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,G,kCCTXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,EAAUC,GAK3CA,EAJqBF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,OAM3Db,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IAK7CN,EAAgBH,EAAO,QAASL,GAChCQ,EAAgBH,EAAO,MAAOL,GAK9BQ,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC3BnC,IAKMgB,EAAkB,SAAAC,GACtB,IANiCC,EAAKC,EAMhCvB,GAN2BsB,EAMO,IANFC,EAMO,IALtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAM9CK,EAAaH,KAAKE,SAAW,GAEjC,OAAO,IAAIxB,SAAQ,SAACC,EAASyB,GAE3BC,YAAW,WAEPF,EACFxB,EAAQ,CAAE2B,GAAGT,EAAYS,GAAIzB,KAAKL,IAElC4B,EAAOP,EAAYS,MAGpB9B,OAID+B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIzB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BuB,EAA3B,iBAA8CzB,EAA9C,OAGI2B,EAAW,SAAAF,GACfxB,QAAQ2B,KAAR,gCAA6CH,EAA7C,8BAGFV,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAC/B1B,KAAKuB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,K","file":"main.951d5a1ada30497273d8.js","sourcesContent":["const delay = ms => {\r\n    return Promise.resolve(ms);\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  callback(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      setTimeout(() => { \r\n\r\n      if (canProcess) {\r\n        resolve({ id:transaction.id, time:delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n     \r\n    }, delay);\r\n  })\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}